name: continuous-deployment-frontend

on:
  push:
    paths:
      - 'starter/frontend/**'
    branches:
      - main
  workflow_dispatch:

env: 
  WORKING_DIRECTORY: 'starter/frontend'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 18

    - name: Cache Node Modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('$FRONTEND_PATH/package-lock.json') }}

    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm install

    - name: Run lint
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm run lint

    - name: Run test
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm run test

  test:
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: starter/frontend

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Use Node.js 
      uses: actions/setup-node@v3
      with:
        node-version: ${{env.NODE_VERSION}}
        cache: 'npm'
        cache-dependency-path: "starter/frontend/package-lock.json"
        
    - name: Test
      run: | 
        npm config set legacy-peer-deps true
        npm i -g eslint
        npm ci
        npm run test 

  deploy:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test 
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name:  Build, tag, and push image to Amazon ECR
      working-directory: starter/frontend
      run: |
        docker build --build-arg REACT_APP_MOVIE_API_URL=${{ secrets.REACT_APP_MOVIE_API_URL }} -t frontend .
        docker tag frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
    
    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --name cluster --region us-east-1

    - name: Set image tag and apply to cluster
      run: |
        cd starter/frontend/k8s
        kustomize edit set image frontend=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
        kustomize build | kubectl apply -f -
