name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  
  workflow_dispatch:

jobs:

  lint-frontend:
    name: 'Lint Frontend'
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    steps:
      # Check out the code to the runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup NodeJS
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Cache node modules
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.OS }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      # Install dependencies only if cache is missing
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: starter/frontend

      # Run lint
      - name: Run lint
        run: npm run lint
        working-directory: starter/frontend

  test-frontend:
    name: 'Test Frontend'
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    steps:
      # Check out the code to the runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup NodeJS
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Cache node modules
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.OS }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      # Install dependencies only if cache is missing
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: starter/frontend

      # Run test
      - name: Run test
        run: npm run test
        working-directory: starter/frontend

  build-frontend:
    name: 'Build Frontend'
    needs: [ lint-frontend, test-frontend ]
    runs-on: ubuntu-latest

    outputs:
      REPOSITORY: ${{ steps.build-and-push.outputs.REPOSITORY }}
      IMAGE_TAG: ${{ steps.build-and-push.outputs.IMAGE_TAG }}

    steps:
      # Check out the code to the runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup NodeJS
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Cache node modules
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.OS }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      # Install dependencies only if cache is missing
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: starter/frontend

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Configure AWS credentials
      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRETS_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-west-2

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      # Build, tag, and push docker image to Amazon ECR
      - name: Build, tag, and push docker image to Amazon ECR
        id: build-and-push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: udacity
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/frontend
          docker build --no-cache --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t $REGISTRY/$REPOSITORY:frontend-$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:frontend-$IMAGE_TAG

          echo "::set-output name=REPOSITORY::$REPOSITORY"
          echo "::set-output name=IMAGE_TAG::frontend-$IMAGE_TAG"

  deploy-frontend:
    name: 'Deploy Frontend'
    needs: [ build-frontend ]
    runs-on: ubuntu-latest

    env:
      REPOSITORY: ${{ needs.build-frontend.outputs.REPOSITORY }}
      IMAGE_TAG: ${{ needs.build-frontend.outputs.IMAGE_TAG }}

    steps:
      # Check out the code to the runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRETS_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-west-2

      # Setup kubectl
      - name: Setup kubectl
        uses: yokawasa/action-setup-kube-tools@v0.9.3
        with:
          kubectl: '1.27.3'

      # Install Kustomize
      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/local/bin/

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          cd starter/frontend/k8s
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
          kustomize edit set image frontend=${{ secrets.PRIVATE_REGISTRY_URL }}/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f - --kubeconfig=kubeconfig.yaml
